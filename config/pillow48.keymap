#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/pointing.h>


#define BASE 0
#define MODS 1
#define FUNC 2
#define SYM1 3
#define SYM2 4
#define MOUSE1 5
#define MOUSE2 6
#define NUM1 7
#define NUM2 8
#define FLIP 9
#define MEDIA 10

/ {
    keymap {
        compatible = "zmk,keymap";
        BASE {
            display-name = "Base";
            bindings = <
            &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                      &kp N8   &kp N9   &kp N0   &kp MINUS     
&kp TAB     &kp Q   &kp W   &kp E   &kp R   &kp T                    &kp Y    &kp U    &kp I    &kp O    &kp P    
&mo 3       &kp A   &kp S   &kp D   &kp F   &kp G                    &kp H    &kp J    &kp K    &kp L    &kp SINGLE_QUOTE
&kp LSHFT   &tog 9  &kp Z   &kp X   &kp C   &kp V                    &kp B    &kp N    &kp M    &tog 9   &kt LSHFT
                    &tog 7  &mo 1   &ht_AltSpace LALT SPC            &mo 7    &kp SPC  &mo 2      
            >;            
        };

        MODS {
            display-name = "Mods and Navigation";
            bindings = <
       &kp ESC      &kp UP   &kp LEFT   &kp RIGHT   &kp DOWN                    &kp LC(BSPC)    &kp BSPC    &kp DEL     &kp LC(DEL)
&trans   &sk LCTRL   &sk LSHFT   &sk LALT    &kp T       &kp BSPC            &kp LA(LEFT)    &mkp MCLK   &kp UP      &mkp RCLK       &kp LA(RIGHT)    
&trans  &kp LC(A)   &kp LC(S)   &sk LGUI    &kp LC(F)   &kp ENTER           &mkp LCLK       &kp LEFT    &kp DOWN    &kp RIGHT       &kp ENTER
&tog 10 &kp LC(Y)   &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)           &kp LC(PG_UP)   &kp HOME    &kp END     &kp LC(PG_DN)   &trans  
                                    &trans      &trans      &trans              &trans          &trans      &trans  
            >;  
        };
//sl: sticky layer, same function with one shot layer

        FUNC { //one shot layer
            display-name = "FN keys and mostly unused symbols";
            bindings = <
    &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2 &bt BT_CLR      &bootloader            &bootloader  &trans      &trans      &trans                                      
&kp F12     &kp F11     &kp F2      &kp F8      &kp F4      &kp F5              &kp SCROLLLOCK  &trans      &trans      &trans      &trans    
&sl 10      &kt LCTRL   &kt LSHFT   &kt LGUI    &kt LALT    &trans              &kp INS         &kp PG_UP   &kp PG_DN   &kp PSCRN   &kp KP_NUMLOCK      
&kp F1      &kp F3      &kp F6      &kp F7      &kp F9      &kp F10             &trans          &trans      &trans      &trans      &trans
                                    &mo 2      &trans      &trans               &trans          &trans      &trans     
            >;
        };

        SYM1 {
            display-name = "Frequent Symbols";
            bindings = <
            &kp F13 &kp F14 &kp F15 &kp F16 &kp F17                  &kp STAR        &kp LPAR    &kp RPAR        &kp UNDERSCORE     
&kp LA(SPC) &mo 4   &mo 5   &trans  &trans  &kp F18                 &kp SEMICOLON   &kp SLASH   &kp QUESTION    &kp LEFT_BRACKET    &kp RIGHT_BRACKET     
&trans      &kp F19 &kp F20 &trans  &trans  &kp F21                 &kp AMPS        &kp COMMA   &kp DOT         &kp COLON           &kp DOUBLE_QUOTES
&trans      &trans  &trans  &kp F22 &kp F23 &kp F24                 &kp LC(LS(TAB)) &kp TILDE   &kp GRAVE       &kp LC(TAB)         &trans
                            &trans  &trans  &trans                  &trans          &trans      &trans    
            >;
        };

        SYM2 { //CAPS_ONlY
            display-name = "Less Frequent Symbols";
            bindings = <
        &trans  &trans  &trans  &trans  &trans              &kp BACKSLASH   &kp DLLR        &kp EQUAL           &kp PLUS     
&trans  &trans  &trans  &trans  &trans  &trans              &kp PIPE    &kp AT          &kp HASH            &kp LEFT_BRACE  &kp RIGHT_BRACE   
&trans  &trans  &trans  &trans  &trans  &trans              &kp EXCL    &kp LESS_THAN   &kp GREATER_THAN    &kp PRCNT       &kp CARET
&trans  &trans  &trans  &trans  &trans  &trans              &trans      &trans          &trans              &trans          &trans  
                        &trans  &trans  &trans              &sk RALT    &sk RSHFT       &sk RCTRL    
            >;
        };

        MOUSE1 { 
            display-name = "Slow Mouse";
            bindings = <
    &trans  &trans  &trans    &trans        &trans          &msc MOVE_Y(50)    &msc MOVE_Y(20)   &msc MOVE_Y(-20)   &msc MOVE_Y(-50)     
&trans  &trans  &trans  &mo 6   &trans      &trans          &trans      &mkp MCLK           &mmv MOVE_Y(-250)   &mkp RCLK           &trans    
&trans  &trans  &trans  &trans  &trans      &trans          &mkp LCLK   &mmv MOVE_X(-250)   &mmv MOVE_Y(250)    &mmv MOVE_X(250)    &trans
&trans  &trans  &trans  &trans  &trans      &trans          &trans      &msc MOVE_X(-20)    &msc MOVE_X(20)     &trans              &trans  
                        &trans  &trans       &trans         &trans      &trans              &trans    
            >;
        };

        MOUSE2 { 
            display-name = "Fast Mouse";
            bindings = <
    &trans  &trans  &trans    &trans        &trans          &msc MOVE_X(-50)    &msc MOVE_Y(150)   &msc MOVE_Y(-150)   &msc MOVE_X(50)     
&trans  &trans  &trans  &trans  &trans      &trans          &trans      &mkp MCLK           &mmv MOVE_Y(-1000)  &mkp RCLK           &trans    
&trans  &trans  &trans  &trans  &trans      &trans          &mkp LCLK   &mmv MOVE_X(-1000)  &mmv MOVE_Y(1000)   &mmv MOVE_X(1000)   &trans
&trans  &trans  &trans  &trans  &trans      &trans          &trans      &trans              &trans              &trans              &trans
                        &trans  &trans      &trans          &trans      &trans              &trans    
            >;
        };

        NUM1 {
            display-name = "Base numbers";
            bindings = <
                &kp N1  &kp N2      &kp N3      &kp N4      &tog 8                   &kp N1      &kp N2      &kp N3          &kp N4       
&kp LC(PLUS)    &kp N5  &kp N6      &kp N7      &kp N8      &kp BSPC                &kp N5      &kp N6      &kp N7          &kp N8      &kp BSPC       
&kp LC(MINUS)   &kp N9  &kp N0      &kp COMMA   &kp DOT     &kp ENTER               &kp N9      &kp N0      &kp COMMA       &kp DOT     &kp ENTER 
&trans          &trans  &kp MINUS   &kp SLASH   &kp EQUAL   &trans                 &trans      &kp MINUS   &kp SLASH       &kp EQUAL   &tog 8   
                                    &trans      &trans      &trans                  &trans      &trans      &trans
            >;
        };

        NUM2 {
            display-name = "Numpad numbers";
            bindings = <
            &kp KP_N1   &kp KP_N2       &kp KP_N3       &kp KP_N4       &trans                  &kp KP_N1   &kp KP_N2       &kp KP_N3           &kp KP_N4       
&trans  &kp KP_N5   &kp KP_N6       &kp KP_N7       &kp KP_N8       &kp BSPC                &kp KP_N5   &kp KP_N6       &kp KP_N7           &kp KP_N8       &kp BSPC       
&trans  &kp KP_N9   &kp KP_N0       &kp KP_COMMA    &kp KP_DOT      &kp ENTER               &kp KP_N9   &kp KP_N0       &kp KP_COMMA        &kp KP_DOT      &kp ENTER 
&trans  &kp KP_PLUS &kp KP_MINUS    &kp KP_MULTIPLY &kp KP_DIVIDE   &kp KP_EQUAL            &kp KP_PLUS &kp KP_MINUS    &kp KP_MULTIPLY     &kp KP_DIVIDE   &kp KP_EQUAL   
                                    &trans          &trans          &trans                  &trans      &trans          &trans
            >;
        };

        FLIP {
            display-name = "Left";
            bindings = <
        &kp N8  &kp N9  &kp N0  &kp MINUS   &kp COMMA                   &kp N1  &kp N2   &kp N3  &kp N4                             
&trans  &kp U   &kp I   &kp O   &kp P       &kp Y                       &kp Q   &kp W    &kp E   &kp R   &kp T   
&trans  &kp J   &kp K   &kp L   &kp H       &kp SINGLE_QUOTE            &kp A   &kp S    &kp D   &kp F   &kp G     
&trans  &trans  &kp B   &kp N   &kp M       &kp DOT                     &kp Z   &kp X    &kp C   &kp V   &trans
                        &trans  &trans      &trans                      &trans  &trans   &trans
            >;
        };
 
        PUNC {
            display-name = "Punctuation";
            bindings = <
        &kp EXCL &kp AT &kp HASH &kp DLLR      &kp GRAVE                               &trans  &trans  &trans  &trans      
&trans  &kp PRCNT &kp CARET &kp AMPS  &kp STAR      &kp SLASH       &trans          &trans  &trans  &trans  &trans  &trans       
&trans  &kp LPAR  &kp RPAR  &kp LESS_THAN  &kp GREATER_THAN      &kp SEMICOLON       &trans          &trans  &trans  &trans  &trans            
&trans  &trans  &kp BACKSLASH  &kp LEFT_BRACKET    &kp RIGHT_BRACKET   &trans       &trans  &trans  &trans  &trans  &trans       
                        &trans              &trans              &trans          &trans  &trans  &trans
            >;
        };
    }; 

    behaviors {
        ht_AltSpace: hold_tap_AltSpace {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_AltSpace";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        sk: sticky_key {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <5000>;   
            quick-release;             
        };
    };
/*
0 1 2 3 4               5 6 7 8
9  10 11 12 13 14       15 16 17 18 19
20 21 22 23 24 25       26 27 28 29 30
31 32 33 34 35 36       37 38 39 40 41
         42 43 44       45 46 47   
*/

    combos {
        compatible = "zmk,combos";
        combo_N6 {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp N6>;
        };
        combo_N7 {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp N7>;
        };
        combo_AppSwitch {
            timeout-ms = <50>;
            key-positions = <9 10>;
            bindings = <&kp LA(TAB)>;
        };
        combo_LCTRL {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LCTRL>;
        };
        combo_LSHFT {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LSHFT>;
        };
        combo_LALT {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp LALT>;
        };           
        combo_LGUI {
            timeout-ms = <50>;
            key-positions = <10 12>;
            bindings = <&kp LGUI>;
        };
        combo_RCTRL {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp RCTRL>;
        }; 
        combo_RSHFT {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RSHFT>;
        };
        combo_RALT {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RALT>;
        }; 
        combo_RGUI {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LGUI>;
        }; 
        combo_reset_left {
            timeout-ms = <50>;
            key-positions = <2 3 4>;
            bindings = <&bootloader>;
        };               
        combo_reset_right {
            timeout-ms = <50>;
            key-positions = <5 6 7>;
            bindings = <&bootloader>;
        };
        combo_to_BASE {
            timeout-ms = <50>;
            key-positions = <42 43 44>;
            bindings = <&to 0>;
        };
        combo_FUNC_z {
            timeout-ms = <50>;
            key-positions = <31 32 33>;
            bindings = <&tog 2>;
        };
        combo_FUNC_q {
            timeout-ms = <50>;
            key-positions = <9 10 11>;
            bindings = <&sl 2>;
        };
        combo_PUNC_tog {
            timeout-ms = <50>;
            key-positions = <34 35 36>;
            bindings = <&tog 10>;
        };
        combo_PUNC_sl {
            timeout-ms = <50>;
            key-positions = <23 24 25>;
            bindings = <&sl 10>;
        };
    };
};