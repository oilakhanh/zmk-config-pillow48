#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define MODS 1   
#define XFUN 2
#define FUNC 3
#define MOUSE1 4
#define MOUSE2 5
#define NUM1 6
#define NUM2 7
#define FLIP 8
#define APPS 9
#define SYMB 10

/ {
    keymap {
        compatible = "zmk,keymap";
        
        BASE {
            display-name = "Base";
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp ESC                     &kp N8   &kp N9   &kp N0   &kp MINUS     
&kp Q   &kp W   &kp E   &kp R   &kp T   &kp RALT            &kp Y   &kp U    &kp I    &kp O     &kp P    
&kp A   &kp S   &kp D   &kp F   &kp G   &sl 3               &kp H   &kp J    &kp K    &kp L     &kp SINGLE_QUOTE
&kp TAB &kp Z   &kp X   &kp C   &kp V   &tog 7              &kp B   &kp N    &kp M    &kp LC(LS(LA(F12)))    &mo 1
        &mo_tog 8 6     &mo 1   &ht_AltSpace LSHFT SPC      &mo 6   &kp SPC  &mo 3      
            >;            
        };

        MODS {
            display-name = "Mods and Navigation";
            bindings = <
       &kp ESC      &kp UP   &kp LEFT   &kp RIGHT   &kp DOWN                    &kp LC(PG_UP)   &kp BSPC    &kp DEL     &kp LC(PG_DN)
&sl 2       &sk LCTRL   &sk LSHFT   &kp TAB     &kp BSPC    &trans              &kp LA(LEFT)    &mkp MCLK   &kp UP      &mkp RCLK       &kp LA(RIGHT)    
&sk LALT    &sl 9       &mo 4       &sk LGUI    &kp ENTER   &trans              &mkp LCLK       &kp LEFT    &kp DOWN    &kp RIGHT       &kp ENTER
&kp LC(Y)   &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)   &trans              &kp PLUS        &kp HOME    &kp END     &kp MINUS       &trans  
                                    &trans      &trans      &trans              &kp SPC         &sl 10      &sl 9  
            >;  
        };

        XFUN {
            display-name = "Extra Functions";
            bindings = <
            &kp F13 &kp F14 &kp F15 &kp F16 &trans                          &kp LG(LA(LS(F1)))      &kp LG(LA(LS(F2)))      &kp LG(LA(LS(F3)))      &kp LG(LA(LS(F4)))     
&trans      &kp LA(SPC) &kp F17 &kp F18 &kp F19 &trans                      &kp LG(LA(LS(F5)))      &kp LG(LA(LS(F6)))      &kp LG(LA(LS(F7)))      &kp LG(LA(LS(F8)))      &kp LG(LA(LS(F9)))
&kp LGUI    &none       &kp F20 &kp F21 &kp F22 &trans                      &kp LG(LA(LS(F10)))     &kp LG(LA(LS(F11)))     &kp LG(LA(LS(F12)))     &kp LG(LA(LS(F13)))     &kp LG(LA(LS(F14)))
&trans      &trans      &trans  &kp F23 &kp F24 &trans                      &kp LG(LA(LS(F15)))     &kp LG(LA(LS(F16)))     &kp LG(LA(LS(F17)))     &kp LG(LA(LS(F18)))     &kp LG(LA(LS(F19)))
                                &trans  &trans  &trans                      &kp LG(LA(LS(F20)))     &kp LG(LA(LS(F21)))     &kp LG(LA(LS(F22)))        
            >;
        };

        FUNC {
            display-name = "FN keys and TKL cluster";
            bindings = <
    &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2 &bt BT_CLR      &bootloader                 &kp SCROLLLOCK  &trans      &trans      &trans                                      
&kp F11     &kp F2      &kp F8      &kp F4      &kp F5      &trans                  &sl LGUI    &sl RALT    &sl RSHFT   &sl RCTRL   &trans   
&kp LCTRL   &kp LSHFT   &kp LALT    &kp F9      &kp F12     &trans                  &kp LGUI    &kp RALT    &kp RSHFT   &kp RCTRL   &trans      
&kp F1      &kp F3      &kp F6      &kp F7      &kp F10     &trans                  &kp INS     &kp PG_UP   &kp PG_DN   &kp PSCRN   &kp KP_NUMLOCK
                                    &trans      &trans      &trans                  &trans      &trans      &trans      
            >;
        };

        MOUSE1 { 
            display-name = "Slow Mouse";
            bindings = <
    &trans  &trans  &trans    &trans        &trans                      &msc MOVE_X(-20)    &msc MOVE_Y(20)   &msc MOVE_Y(-20)   &msc MOVE_X(20)     
&trans  &trans  &trans  &mo 5   &trans      &trans                      &trans      &mkp MCLK           &mmv MOVE_Y(-500)   &mkp RCLK           &trans    
&trans  &trans  &trans  &mo 5   &trans      &trans                      &mkp LCLK   &mmv MOVE_X(-500)   &mmv MOVE_Y(500)    &mmv MOVE_X(500)    &trans
&trans  &trans  &trans  &trans  &trans      &trans                      &kp LC(PG_UP)   &kp LC(PG_DN)       &kp LA(LEFT)    &kp LA(RIGHT)       &trans  
                        &trans  &trans      &trans                      &mkp MCLK   &mkp LCLK           &mkp RCLK     
            >;
        };

        MOUSE2 { 
            display-name = "Fast Mouse";
            bindings = <
    &trans  &trans  &trans    &trans        &trans                      &msc MOVE_X(-50)    &msc MOVE_Y(150)   &msc MOVE_Y(-150)   &msc MOVE_X(50)     
&trans  &trans  &trans  &trans  &trans      &trans                      &trans      &mkp MCLK           &mmv MOVE_Y(-1000)  &mkp RCLK           &trans    
&trans  &trans  &trans  &trans  &trans      &trans                      &mkp LCLK   &mmv MOVE_X(-1000)  &mmv MOVE_Y(1000)   &mmv MOVE_X(1000)   &trans
&trans  &trans  &trans  &trans  &trans      &trans                      &kp LC(PG_UP)   &kp LC(PG_DN)       &kp LA(LEFT)    &kp LA(RIGHT)       &trans 
                        &trans  &trans      &trans                      &mkp MCLK   &mkp LCLK           &mkp RCLK
            >;
        };

        NUM1 {
            display-name = "Base numbers";
            bindings = <
            &kp N1  &kp N2      &kp N3      &kp N4      &trans                  &kp N8      &kp N9      &kp N0      &kp BSPC       
&kp BSPC    &kp N5  &kp N6      &kp N7      &kp N8      &trans                  &kp N4      &kp N5      &kp N6      &kp N7      &kp ENTER       
&kp ENTER   &kp N9  &kp N0      &kp COMMA   &kp DOT     &trans                  &kp N1      &kp N2      &kp N3      &kp COMMA   &kp DOT 
&kp TAB &kp PLUS    &kp MINUS   &kp SLASH   &kp EQUAL   &trans                  &kp PLUS    &kp MINUS   &kp STAR    &kp SLASH   &kp EQUAL   
                                &trans      &trans      &trans                  &trans      &trans      &trans 
            >;
        };

        NUM2 {
            display-name = "Numpad numbers";
            bindings = <
            &kp KP_N1   &kp KP_N2       &kp KP_N3       &kp KP_N4           &trans                      &kp KP_N1   &kp KP_N2       &kp KP_N3           &kp KP_N4       
&kp BSPC    &kp KP_N5   &kp KP_N6       &kp KP_N7       &kp KP_N8           &trans                      &kp KP_N5   &kp KP_N6       &kp KP_N7           &kp KP_N8       &kp BSPC       
&kp ENTER   &kp KP_N9   &kp KP_N0       &kp KP_COMMA    &kp KP_DOT          &trans                      &kp KP_N9   &kp KP_N0       &kp KP_COMMA        &kp KP_DOT      &kp ENTER 
&kp KP_PLUS &kp KP_MINUS    &kp KP_MULTIPLY &kp KP_DIVIDE   &kp KP_EQUAL    &trans                      &kp KP_PLUS &kp KP_MINUS    &kp KP_MULTIPLY     &kp KP_DIVIDE   &kp KP_EQUAL   
                                            &trans          &trans          &trans                      &trans      &trans      &trans 
            >;
        };

        FLIP {
            display-name = "Left";
            bindings = <
        &kp N8  &kp N9  &kp N0  &kp MINUS   &trans                          &trans  &trans  &trans  &trans                             
&kp U   &kp I   &kp O   &kp P   &kp Y               &trans              &trans  &trans  &trans  &trans  &trans   
&kp J   &kp K   &kp L   &kp H   &kp SINGLE_QUOTE    &trans              &trans  &trans  &trans  &trans  &trans     
&kp TAB &kp B   &kp N   &kp M   &kp BSPC            &trans              &trans  &trans  &trans  &trans  &trans
                        &trans  &trans              &trans              &trans  &trans  &trans 
            >;
        };

        APPS {
            display-name = "Quick access to apps";
            bindings = <
        &kp LC(LS(LA(F1)))  &kp LC(LS(LA(F2)))  &kp LC(LS(LA(F3)))  &kp LC(LS(LA(F4)))   &trans                                     &kp LG(LS(LA(LC(F1))))  &kp LG(LS(LA(LC(F2))))  &kp LG(LS(LA(LC(F3))))  &kp LG(LS(LA(LC(F4))))                             
&kp LC(LS(LA(F5)))  &kp LC(LS(LA(F6)))  &kp LC(LS(LA(F7)))  &kp LC(LS(LA(F8)))  &kp LC(LS(LA(F9)))  &trans                          &kp LG(LS(LA(LC(F5))))  &kp LG(LS(LA(LC(F6))))  &kp LG(LS(LA(LC(F7))))  &kp LG(LS(LA(LC(F8))))  &kp LG(LS(LA(LC(F9))))   
&kp LC(LS(LA(F11))) &trans              &kp LC(LS(LA(F13))) &kp LC(LS(LA(F14))) &kp LC(LS(LA(F15))) &trans                          &kp LG(LS(LA(LC(F10)))) &kp LG(LS(LA(LC(F11)))) &kp LG(LS(LA(LC(F12)))) &kp LG(LS(LA(LC(F13)))) &kp LG(LS(LA(LC(F14))))
&kp LC(LS(LA(F16))) &kp LC(LS(LA(F17))) &kp LC(LS(LA(F18))) &kp LC(LS(LA(F19))) &kp LC(LS(LA(F20))) &trans                          &kp LG(LS(LA(LC(F15)))) &kp LG(LS(LA(LC(F16)))) &kp LG(LS(LA(LC(F17)))) &kp LG(LS(LA(LC(F18)))) &none
                                        &kp LC(LS(LA(F22))) &trans              &kp LC(LS(LA(F24)))                                 &kp LG(LS(LA(LC(F20)))) &kp LG(LS(LA(LC(F21)))) &trans
            >;
        };

        SYMB {
            display-name = "All Symbols";
            bindings = <
                &kp EXCL        &kp AT              &kp HASH        &kp DLLR        &trans                      &kp RIGHT_BRACE &kp LPAR    &kp RPAR        &kp UNDERSCORE     
&kp GRAVE       &kp PRCNT       &kp CARET           &kp AMPS        &kp STAR        &trans                      &kp EQUAL       &kp PLUS    &kp QUESTION    &kp LEFT_BRACKET    &kp RIGHT_BRACKET     
&kp SEMICOLON   &kp LESS_THAN   &kp GREATER_THAN    &kp TILDE       &kp LEFT_BRACE  &trans                      &kp SLASH       &kp COMMA   &kp DOT         &kp COLON           &kp DOUBLE_QUOTES
&trans          &kp LC(PG_UP)   &kp LC(PG_DN)       &kp LA(LEFT)    &kp LA(RIGHT)   &trans                      &kp LC(LS(TAB)) &kp PIPE    &kp BACKSLASH   &kp LC(TAB)         &trans
                                                    &trans          &trans          &trans                      &trans          &trans      &trans     
            >;
        };
    };

    behaviors {
        ht_AltSpace: hold_tap_AltSpace {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_AltSpace";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        mo_tog: mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&tog>;
            display-name = "Mo-Tog";
        };

        kp_tog: kp_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&kp>, <&tog>;
            display-name = "Kp_Tog";
        };

        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&kp>;
            display-name = "Layer-Tap";
        };

        sk: sticky_key {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <5000>;   
            quick-release;             
        };
    };
/*
0 1 2 3 4               5 6 7 8
9  10 11 12 13 14       15 16 17 18 19
20 21 22 23 24 25       26 27 28 29 30
31 32 33 34 35 36       37 38 39 40 41
         42 43 44       45 46 47   
*/

    combos {
        compatible = "zmk,combos";
        combo_LCTRL {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp LCTRL>;
        };
        combo_LALT {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp LALT>;
        };
        combo_LGUI {
            timeout-ms = <50>;
            key-positions = <34 35>;
            bindings = <&kp LGUI>;
        };
        combo_reset_left {
            timeout-ms = <50>;
            key-positions = <2 3 4>;
            bindings = <&bootloader>;
        };               
        combo_reset_right {
            timeout-ms = <50>;
            key-positions = <5 6 7>;
            bindings = <&bootloader>;
        };
        combo_to_BASE {
            timeout-ms = <50>;
            key-positions = <42 43 44>;
            bindings = <&to 0>;
        };
        combo_NUM2_tog {
            timeout-ms = <50>;
            key-positions = <42 10>;
            bindings = <&tog 8>;
        };  
        combo_NUM2_sl {
            timeout-ms = <50>;
            key-positions = <42 9>;
            bindings = <&sl 8>;
        };
        combo_FUNC_tog {
            timeout-ms = <50>;
            key-positions = <42 21>;
            bindings = <&tog 2>;
        };
        combo_FUNC_sl {
            timeout-ms = <50>;
            key-positions = <42 20>;
            bindings = <&sl 2>;
        };
        combo_PUNC_tog {
            timeout-ms = <50>;
            key-positions = <42 32>;
            bindings = <&tog 10>;
        };
        combo_PUNC_sl {
            timeout-ms = <50>;
            key-positions = <42 31>;
            bindings = <&sl 10>;
        };
    };
};

    &sl {
        release-after-ms = <4000>;
    };
        
